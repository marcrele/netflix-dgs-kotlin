openapi: 3.0.1
info:
  title: Generic Key Value API
  version: 1.0.0

servers:
  - url: https://vnuuem5hmf.execute-api.eu-central-1.amazonaws.com/Lambdaless

security:
  - ApiKeyAuth: []

paths:
  /bring:
    get:
      responses:
        200:
          description: The request succeded and results are in the response message.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/responses/Entry"

      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan",
          }
        credentials: { "Fn::GetAtt": [KeyValueAPIRole, Arn] }
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}"
                }
              - { tableName: { Ref: KeyValueTable } }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: '#set($inputRoot = $input.path("$"))
                [
                #foreach($elem in $inputRoot.Items) {
                "id": "$elem.pk.S",
                "value": "$elem.value.S"
                }#if($foreach.hasNext),#end
                #end
                ]'

    post:
      responses:
        200:
          $ref: "#/components/responses/Empty"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem",
          }
        credentials: { "Fn::GetAtt": [KeyValueAPIRole, Arn] }
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}",
                  "Item": {
                    "pk": {
                      "S": "$input.path("$.id")"
                    },
                    "value": {
                      "S": "$input.path("$.value")"
                    }
                  }
                }
              - { tableName: { Ref: KeyValueTable } }
        responses:
          default:
            statusCode: 200

  /bring/{key}:
    get:
      parameters:
        - name: "key"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/Entry"
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: AWS
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem",
          }
        credentials: { "Fn::GetAtt": [KeyValueAPIRole, Arn] }
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}",
                  "Key": {
                          "pk": {
                            "S": "$input.params("key")"
                          }
                        }
                }
              - { tableName: { Ref: KeyValueTable } }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: '#set($inputRoot = $input.path("$"))
                {
                "id": "$inputRoot.Item.pk.S",
                "value": "$inputRoot.Item.value.S"
                }'

    delete:
      parameters:
        - name: "key"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        204:
          description: The bring was deleted
      x-amazon-apigateway-integration:
        credentials: { "Fn::GetAtt": [KeyValueAPIRole, Arn] }
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem",
          }
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}",
                    "Key": {
                      "pk": {
                        "S": "$input.params("key")"
                      }
                    },
                  "ReturnValues": "ALL_OLD"
                }
              - { tableName: { Ref: KeyValueTable } }
        responses:
          default:
            statusCode: 204
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Entry:
      type: object
      description: Entry
      properties:
        id:
          type: string
        value:
          type: string
  responses:
    Empty:
      description: Empty Schema
      content:
        application/json:
          schema:
            type: object

    Entry:
      description: Key Value Entry
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - value
            properties:
              id:
                type: string
              value:
                type: string
